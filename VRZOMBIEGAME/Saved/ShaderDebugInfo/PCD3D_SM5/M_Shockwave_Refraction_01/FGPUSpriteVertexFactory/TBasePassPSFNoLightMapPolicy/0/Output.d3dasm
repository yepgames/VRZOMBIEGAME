//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer View
// {
//
//   row_major float4x4 View_View_RelativeWorldToClip;// Offset:   64 Size:    64
//   row_major float4x4 View_View_SVPositionToTranslatedWorld;// Offset:  704 Size:    64
//   float3 View_View_ViewTilePosition; // Offset:  960 Size:    12
//   float3 View_View_MatrixTilePosition;// Offset:  976 Size:    12
//   float3 View_View_RelativePreViewTranslation;// Offset: 1152 Size:    12
//   float View_View_PreExposure;       // Offset: 2084 Size:     4
//   float View_View_OutOfBoundsMask;   // Offset: 2160 Size:     4
//   float3 View_View_VolumetricFogInvGridSize;// Offset: 3568 Size:    12
//   float3 View_View_VolumetricFogGridZParams;// Offset: 3584 Size:    12
//
// }
//
// cbuffer InstancedView
// {
//
//   row_major float4x4 InstancedView_InstancedView_RelativeWorldToClip;// Offset:   64 Size:    64
//   row_major float4x4 InstancedView_InstancedView_SVPositionToTranslatedWorld;// Offset:  704 Size:    64
//   float3 InstancedView_InstancedView_ViewTilePosition;// Offset:  960 Size:    12
//   float3 InstancedView_InstancedView_MatrixTilePosition;// Offset:  976 Size:    12
//   float3 InstancedView_InstancedView_RelativePreViewTranslation;// Offset: 1152 Size:    12
//
// }
//
// cbuffer Primitive
// {
//
//   float3 Primitive_Primitive_TilePosition;// Offset:   16 Size:    12
//   float Primitive_Primitive_ObjectBoundsX;// Offset:  300 Size:     4
//   float4 Primitive_Primitive_ObjectRelativeWorldPositionAndRadius;// Offset:  304 Size:    16
//   float Primitive_Primitive_ObjectBoundsY;// Offset:  412 Size:     4
//   float Primitive_Primitive_ObjectBoundsZ;// Offset:  428 Size:     4
//
// }
//
// cbuffer TranslucentBasePass
// {
//
//   float TranslucentBasePass_TranslucentBasePass_Shared_Fog_ApplyVolumetricFog;// Offset: 1868 Size:     4
//
// }
//
// cbuffer Material
// {
//
//   float4 Material_Material_PreshaderBuffer[3];// Offset:    0 Size:    48
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// View_SharedBilinearClampedSampler    sampler      NA          NA             s0      1 
// TranslucentBasePass_Shared_Fog_IntegratedLightScattering    texture  float4          3d             t0      1 
// TranslucentBasePass_Shared_FogISR_IntegratedLightScattering    texture  float4          3d             t1      1 
// View                              cbuffer      NA          NA            cb0      1 
// InstancedView                     cbuffer      NA          NA            cb1      1 
// Primitive                         cbuffer      NA          NA            cb2      1 
// TranslucentBasePass               cbuffer      NA          NA            cb3      1 
// Material                          cbuffer      NA          NA            cb4      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 5   xyzw        0     NONE   float   xyzw
// PACKED_EYE_INDEX         0   x           1     NONE    uint   x   
// TEXCOORD                 7   xyzw        2     NONE   float   xyzw
// SV_Position              0   xyzw        3      POS   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[225], immediateIndexed
dcl_constantbuffer CB1[73], immediateIndexed
dcl_constantbuffer CB2[27], immediateIndexed
dcl_constantbuffer CB3[117], immediateIndexed
dcl_constantbuffer CB4[2], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture3d (float,float,float,float) t0
dcl_resource_texture3d (float,float,float,float) t1
dcl_input_ps linear v0.xyzw
dcl_input_ps constant v1.x
dcl_input_ps linear v2.xyzw
dcl_input_ps_siv linear noperspective v3.xyz, position
dcl_output o0.xyzw
dcl_temps 11
if_z v1.x
  mov r0.x, cb0[44].x
  mov r0.y, cb0[45].x
  mov r0.z, cb0[46].x
  mov r0.w, cb0[47].x
  mov r1.x, cb0[44].y
  mov r1.y, cb0[45].y
  mov r1.z, cb0[46].y
  mov r1.w, cb0[47].y
  mov r2.x, cb0[44].z
  mov r2.y, cb0[45].z
  mov r2.z, cb0[46].z
  mov r2.w, cb0[47].z
  mov r3.x, cb0[44].w
  mov r3.y, cb0[45].w
  mov r3.z, cb0[46].w
  mov r3.w, cb0[47].w
  mov r4.x, cb0[4].x
  mov r4.y, cb0[5].x
  mov r4.z, cb0[6].x
  mov r4.w, cb0[7].x
  mov r5.x, cb0[4].y
  mov r5.y, cb0[5].y
  mov r5.z, cb0[6].y
  mov r5.w, cb0[7].y
  mov r6.x, cb0[4].w
  mov r6.y, cb0[5].w
  mov r6.z, cb0[6].w
  mov r6.w, cb0[7].w
  mov r7.xyz, -cb0[61].xyzx
  mov r8.xyz, -cb0[60].xyzx
  mov r9.xyz, cb0[72].xyzx
else 
  mov r0.x, cb1[44].x
  mov r0.y, cb1[45].x
  mov r0.z, cb1[46].x
  mov r0.w, cb1[47].x
  mov r1.x, cb1[44].y
  mov r1.y, cb1[45].y
  mov r1.z, cb1[46].y
  mov r1.w, cb1[47].y
  mov r2.x, cb1[44].z
  mov r2.y, cb1[45].z
  mov r2.z, cb1[46].z
  mov r2.w, cb1[47].z
  mov r3.x, cb1[44].w
  mov r3.y, cb1[45].w
  mov r3.z, cb1[46].w
  mov r3.w, cb1[47].w
  mov r4.x, cb1[4].x
  mov r4.y, cb1[5].x
  mov r4.z, cb1[6].x
  mov r4.w, cb1[7].x
  mov r5.x, cb1[4].y
  mov r5.y, cb1[5].y
  mov r5.z, cb1[6].y
  mov r5.w, cb1[7].y
  mov r6.x, cb1[4].w
  mov r6.y, cb1[5].w
  mov r6.z, cb1[6].w
  mov r6.w, cb1[7].w
  mov r7.xyz, -cb1[61].xyzx
  mov r8.xyz, -cb1[60].xyzx
  mov r9.xyz, cb1[72].xyzx
endif 
mov r10.xyz, v3.xyzx
mov r10.w, l(1.000000)
dp4 r0.x, r10.xyzw, r0.xyzw
dp4 r0.y, r10.xyzw, r1.xyzw
dp4 r0.z, r10.xyzw, r2.xyzw
dp4 r0.w, r10.xyzw, r3.xyzw
div r0.xyz, r0.xyzx, r0.wwww
add r0.xyz, -r9.xyzx, r0.xyzx
mov_sat r0.w, v0.w
lt r1.x, l(0.000000), cb3[116].w
if_nz r1.x
  add r1.xyz, r7.xyzx, -r8.xyzx
  mad r1.xyz, r1.xyzx, l(2097152.000000, 2097152.000000, 2097152.000000, 0.000000), r0.xyzx
  mov r1.w, l(1.000000)
  dp4 r2.x, r1.xyzw, r4.xyzw
  dp4 r2.y, r1.xyzw, r5.xyzw
  dp4 r1.x, r1.xyzw, r6.xyzw
  div r1.yz, r2.xxyx, r1.xxxx
  mad r2.xy, r1.yzyy, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
  mad r1.x, r1.x, cb0[224].x, cb0[224].y
  log r1.x, r1.x
  mul r1.x, r1.x, cb0[224].z
  mul r2.z, r1.x, cb0[223].z
  if_z v1.x
    sample_l_indexable(texture3d)(float,float,float,float) r1.xyzw, r2.xyzx, t0.xyzw, s0, l(0.000000)
  else 
    sample_l_indexable(texture3d)(float,float,float,float) r1.xyzw, r2.xyzx, t1.xyzw, s0, l(0.000000)
  endif 
  mul r2.x, r1.w, v2.w
  mad r1.xyz, v2.xyzx, r1.wwww, r1.xyzx
else 
  mov r1.xyz, v2.xyzx
  mov r2.x, v2.w
endif 
add r2.yzw, -v0.xxyz, cb4[1].yyzw
mad r2.yzw, cb4[1].xxxx, r2.yyzw, v0.xxyz
max r2.yzw, r2.yyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
lt r1.w, l(0.000000), cb0[135].x
if_nz r1.w
  add r3.xyz, -r8.xyzx, -cb2[1].xyzx
  add r4.xyz, r0.xyzx, -cb2[19].xyzx
  mad r3.xyz, r3.xyzx, l(2097152.000000, 2097152.000000, 2097152.000000, 0.000000), r4.xyzx
  add r4.x, l(1.000000), cb2[18].w
  add r4.y, l(1.000000), cb2[25].w
  add r4.z, l(1.000000), cb2[26].w
  lt r3.xyz, r4.xyzx, |r3.xyzx|
  or r1.w, r3.y, r3.x
  or r1.w, r3.z, r1.w
  add r3.x, -r8.y, -r8.x
  add r3.x, -r8.z, r3.x
  mul r3.x, r3.x, l(2420.113525)
  frc r3.x, r3.x
  add r0.x, r0.y, r0.x
  add r0.x, r0.z, r0.x
  mad r0.x, r0.x, l(0.001154), r3.x
  frc r0.x, r0.x
  lt r0.x, l(0.500000), r0.x
  movc r0.xyz, r0.xxxx, l(0,1.000000,1.000000,0), l(1.000000,1.000000,0,0)
  movc r2.yzw, r1.wwww, r0.xxyz, r2.yyzw
  movc o0.w, r1.w, l(1.000000), r0.w
else 
  mov o0.w, r0.w
endif 
mad r0.xyz, r2.yzwy, r2.xxxx, r1.xyzx
mul o0.xyz, r0.xyzx, cb0[130].yyyy
ret 
// Approximately 131 instruction slots used
