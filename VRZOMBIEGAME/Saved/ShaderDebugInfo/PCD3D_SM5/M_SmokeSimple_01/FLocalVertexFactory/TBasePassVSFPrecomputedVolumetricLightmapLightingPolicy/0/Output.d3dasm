//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer TranslucentBasePass
// {
//
//   float4 TranslucentBasePass_TranslucentBasePass_Shared_Fog_ExponentialFogParameters;// Offset: 1744 Size:    16
//   float4 TranslucentBasePass_TranslucentBasePass_Shared_Fog_ExponentialFogParameters2;// Offset: 1760 Size:    16
//   float4 TranslucentBasePass_TranslucentBasePass_Shared_Fog_ExponentialFogColorParameter;// Offset: 1776 Size:    16
//   float4 TranslucentBasePass_TranslucentBasePass_Shared_Fog_ExponentialFogParameters3;// Offset: 1792 Size:    16
//   float4 TranslucentBasePass_TranslucentBasePass_Shared_Fog_InscatteringLightDirection;// Offset: 1808 Size:    16
//   float4 TranslucentBasePass_TranslucentBasePass_Shared_Fog_DirectionalInscatteringColor;// Offset: 1824 Size:    16
//   float2 TranslucentBasePass_TranslucentBasePass_Shared_Fog_SinCosInscatteringColorCubemapRotation;// Offset: 1840 Size:     8
//   float3 TranslucentBasePass_TranslucentBasePass_Shared_Fog_FogInscatteringTextureParameters;// Offset: 1856 Size:    12
//
// }
//
// cbuffer View
// {
//
//   row_major float4x4 View_View_TranslatedWorldToClip;// Offset:    0 Size:    64
//   float3 View_View_ViewTilePosition; // Offset:  960 Size:    12
//   float3 View_View_ViewForward;      // Offset:  992 Size:    12
//   float3 View_View_RelativeWorldCameraOrigin;// Offset: 1104 Size:    12
//   float3 View_View_TranslatedWorldCameraOrigin;// Offset: 1120 Size:    12
//   float3 View_View_RelativePreViewTranslation;// Offset: 1152 Size:    12
//   float View_View_OneOverPreExposure;// Offset: 2088 Size:     4
//   float4 View_View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;// Offset: 2800 Size:    16
//   float View_View_SkyAtmosphereAerialPerspectiveStartDepthKm;// Offset: 2816 Size:     4
//   float View_View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;// Offset: 2820 Size:     4
//   float View_View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;// Offset: 2824 Size:     4
//   float View_View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;// Offset: 2832 Size:     4
//   float View_View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;// Offset: 2836 Size:     4
//   float View_View_RealTimeReflectionCapture;// Offset: 2864 Size:     4
//   float View_View_HMDEyePaddingOffset;// Offset: 3044 Size:     4
//   float View_View_VolumetricFogMaxDistance;// Offset: 3608 Size:     4
//   uint View_View_InstanceSceneDataSOAStride;// Offset: 4432 Size:     4
//
// }
//
// cbuffer InstancedView
// {
//
//   row_major float4x4 InstancedView_InstancedView_TranslatedWorldToClip;// Offset:    0 Size:    64
//   float3 InstancedView_InstancedView_ViewTilePosition;// Offset:  960 Size:    12
//   float3 InstancedView_InstancedView_TranslatedWorldCameraOrigin;// Offset: 1120 Size:    12
//   float3 InstancedView_InstancedView_RelativePreViewTranslation;// Offset: 1152 Size:    12
//   float InstancedView_InstancedView_OneOverPreExposure;// Offset: 2088 Size:     4
//   float4 InstancedView_InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;// Offset: 2800 Size:    16
//   float InstancedView_InstancedView_SkyAtmosphereAerialPerspectiveStartDepthKm;// Offset: 2816 Size:     4
//   float InstancedView_InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;// Offset: 2820 Size:     4
//   float InstancedView_InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;// Offset: 2824 Size:     4
//   float InstancedView_InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;// Offset: 2832 Size:     4
//   float InstancedView_InstancedView_SkyAtmosphereApplyCameraAerialPerspectiveVolume;// Offset: 2836 Size:     4
//   float InstancedView_InstancedView_RealTimeReflectionCapture;// Offset: 2864 Size:     4
//   float InstancedView_InstancedView_HMDEyePaddingOffset;// Offset: 3044 Size:     4
//   int InstancedView_InstancedView_StereoPassIndex;// Offset: 3084 Size:     4
//
// }
//
// cbuffer LocalVF
// {
//
//   int4 LocalVF_LocalVF_VertexFetch_Parameters;// Offset:    0 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// TranslucentBasePass_Shared_Fog_FogInscatteringColorSampler    sampler      NA          NA             s0      1 
// View_CameraAerialPerspectiveVolumeSampler    sampler      NA          NA             s1      1 
// View_PrimitiveSceneData           texture    byte         r/o             t0      1 
// View_InstanceSceneData            texture    byte         r/o             t1      1 
// InstanceCulling_InstanceIdsBuffer    texture    byte         r/o             t2      1 
// TranslucentBasePass_Shared_Fog_FogInscatteringColorCubemap    texture  float4        cube             t3      1 
// View_CameraAerialPerspectiveVolume    texture  float4          3d             t4      1 
// LocalVF_VertexFetch_TexCoordBuffer    texture  float4         buf             t5      1 
// LocalVF_VertexFetch_PackedTangentsBuffer    texture  float4         buf             t6      1 
// TranslucentBasePass               cbuffer      NA          NA            cb0      1 
// View                              cbuffer      NA          NA            cb1      1 
// InstancedView                     cbuffer      NA          NA            cb2      1 
// LocalVF                           cbuffer      NA          NA            cb3      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// ATTRIBUTE                0   xyzw        0     NONE   float   xyz 
// ATTRIBUTE               13   x           1     NONE    uint   x   
// SV_VertexID              0   x           2   VERTID    uint   x   
// SV_InstanceID            0   x           3   INSTID    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                10   xyzw        0     NONE   float   xyzw
// TEXCOORD                11   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xyzw        2     NONE   float   xyzw
// PACKED_EYE_INDEX         0   x           3     NONE    uint   x   
// PRIMITIVE_ID             0    y          3     NONE    uint    y  
// TEXCOORD                 7   xyzw        4     NONE   float   xyzw
// SV_Position              0   xyzw        5      POS   float   xyzw
// SV_ClipDistance          0   x           6  CLIPDST   float   x   
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -1.000000, 0, 0, 1.000000},
                              { 1.000000, 0, 0, 1.000000} }
dcl_constantbuffer CB0[117], immediateIndexed
dcl_constantbuffer CB1[278], immediateIndexed
dcl_constantbuffer CB2[193], immediateIndexed
dcl_constantbuffer CB3[1], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_raw t0
dcl_resource_raw t1
dcl_resource_raw t2
dcl_resource_texturecube (float,float,float,float) t3
dcl_resource_texture3d (float,float,float,float) t4
dcl_resource_buffer (float,float,float,float) t5
dcl_resource_buffer (float,float,float,float) t6
dcl_input v0.xyz
dcl_input v1.x
dcl_input_sgv v2.x, vertex_id
dcl_input_sgv v3.x, instance_id
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.x
dcl_output o3.y
dcl_output o4.xyzw
dcl_output_siv o5.xyzw, position
dcl_output_siv o6.x, clip_distance
dcl_temps 21
ilt [precise(x)] r0.x, l(0), cb2[192].w
and [precise(y)] r0.y, r0.x, v3.x
and [precise(x)] r1.x, r0.y, l(1)
if_z r1.x
  mov [precise(x)] r2.x, cb1[0].x
  mov [precise(y)] r2.y, cb1[1].x
  mov [precise(z)] r2.z, cb1[2].x
  mov [precise(w)] r2.w, cb1[3].x
  mov [precise(x)] r3.x, cb1[0].y
  mov [precise(y)] r3.y, cb1[1].y
  mov [precise(z)] r3.z, cb1[2].y
  mov [precise(w)] r3.w, cb1[3].y
  mov [precise(x)] r4.x, cb1[0].z
  mov [precise(y)] r4.y, cb1[1].z
  mov [precise(z)] r4.z, cb1[2].z
  mov [precise(w)] r4.w, cb1[3].z
  mov [precise(x)] r5.x, cb1[0].w
  mov [precise(y)] r5.y, cb1[1].w
  mov [precise(z)] r5.z, cb1[2].w
  mov [precise(w)] r5.w, cb1[3].w
  mov [precise(yzw)] r0.yzw, cb1[70].xxyz
  mov r1.zw, cb1[176].yyyz
  mov r6.x, cb1[177].x
  mov [precise(yzw)] r6.yzw, -cb1[60].xxyz
  mov [precise(xyz)] r7.xyz, cb1[72].xyzx
  mov r8.xyzw, cb1[175].xyzw
  mov r7.w, cb1[130].z
  mov r9.x, cb1[176].x
  mov [precise(y)] r9.y, cb1[177].y
  mov r9.z, cb1[179].x
  mov [precise(w)] r9.w, cb1[190].y
else 
  mov [precise(x)] r2.x, cb2[0].x
  mov [precise(y)] r2.y, cb2[1].x
  mov [precise(z)] r2.z, cb2[2].x
  mov [precise(w)] r2.w, cb2[3].x
  mov [precise(x)] r3.x, cb2[0].y
  mov [precise(y)] r3.y, cb2[1].y
  mov [precise(z)] r3.z, cb2[2].y
  mov [precise(w)] r3.w, cb2[3].y
  mov [precise(x)] r4.x, cb2[0].z
  mov [precise(y)] r4.y, cb2[1].z
  mov [precise(z)] r4.z, cb2[2].z
  mov [precise(w)] r4.w, cb2[3].z
  mov [precise(x)] r5.x, cb2[0].w
  mov [precise(y)] r5.y, cb2[1].w
  mov [precise(z)] r5.z, cb2[2].w
  mov [precise(w)] r5.w, cb2[3].w
  mov [precise(yzw)] r0.yzw, cb2[70].xxyz
  mov r1.zw, cb2[176].yyyz
  mov r6.x, cb2[177].x
  mov [precise(yzw)] r6.yzw, -cb2[60].xxyz
  mov [precise(xyz)] r7.xyz, cb2[72].xyzx
  mov r8.xyzw, cb2[175].xyzw
  mov r7.w, cb2[130].z
  mov r9.x, cb2[176].x
  mov [precise(y)] r9.y, cb2[177].y
  mov r9.z, cb2[179].x
  mov [precise(w)] r9.w, cb2[190].y
endif 
and [precise(xy)] r10.xy, v1.xxxx, l(0x80000000, 0x7fffffff, 0, 0)
imul [precise(y)] null, r10.y, r10.y, l(40)
bfi [precise(y)] r10.y, l(28), l(4), r10.y, l(4)
ld_raw_indexable [precise(y)](raw_buffer)(mixed,mixed,mixed,mixed) r10.y, r10.y, t0.xxxx
iadd [precise(y)] r10.y, r10.y, v3.x
iadd [precise(z)] r10.z, v1.x, v3.x
ishl [precise(z)] r10.z, r10.z, l(2)
ld_raw_indexable [precise(z)](raw_buffer)(mixed,mixed,mixed,mixed) r10.z, r10.z, t2.xxxx
and [precise(z)] r10.z, r10.z, l(0x0fffffff)
movc [precise(x)] r10.x, r10.x, r10.y, r10.z
ishl [precise(y)] r10.y, r10.x, l(4)
ld_raw_indexable [precise(y)](raw_buffer)(mixed,mixed,mixed,mixed) r10.y, r10.y, t1.xxxx
and [precise(y)] r1.y, r10.y, l(0x000fffff)
ine [precise(z)] r10.z, r1.y, l(0x000fffff)
if_nz r10.z
  iadd [precise(z)] r10.z, r10.x, cb1[277].x
  ishl [precise(z)] r10.z, r10.z, l(4)
  ld_raw_indexable [precise](raw_buffer)(mixed,mixed,mixed,mixed) r11.xyzw, r10.z, t1.zxwy
  ishl [precise(z)] r10.z, cb1[277].x, l(1)
  iadd [precise(x)] r10.x, r10.x, r10.z
  ishl [precise(x)] r10.x, r10.x, l(4)
  ld_raw_indexable [precise(xzw)](raw_buffer)(mixed,mixed,mixed,mixed) r10.xzw, r10.x, t1.xxyz
  and [precise(xyz)] r12.xyz, r11.wyww, l(0x00007fff, 0x0000ffff, 0x00008000, 0)
  utof [precise(xy)] r13.xy, r12.xyxx
  ushr [precise(xyw)] r12.xyw, r11.yxyz, l(16, 16, 0, 16)
  utof [precise(z)] r13.z, r12.x
  add [precise(xyz)] r13.xyz, r13.yzxy, l(-32768.000000, -32768.000000, -16384.000000, 0.000000)
  mul [precise(xyz)] r13.xyz, r13.xyzx, l(0.000031, 0.000031, 0.000043, 0.000000)
  add [precise(x)] r14.x, r13.y, r13.x
  add [precise(y)] r14.y, -r13.y, r13.x
  dp2 [precise(w)] r11.w, l(1.000000, 1.000000, 0.000000, 0.000000), |r14.xyxx|
  add [precise(z)] r14.z, -r11.w, l(2.000000)
  dp3 [precise(w)] r11.w, r14.xyzx, r14.xyzx
  rsq [precise(w)] r11.w, r11.w
  mul [precise(xyw)] r13.xyw, r11.wwww, r14.xyxz
  add [precise(w)] r11.w, r13.w, l(1.000000)
  div [precise(w)] r11.w, l(1.000000, 1.000000, 1.000000, 1.000000), r11.w
  mov [precise(xy)] r14.xy, -r13.xyxx
  mul [precise(x)] r12.x, r13.y, r14.x
  mul [precise(z)] r15.z, r11.w, r12.x
  mul [precise(x)] r12.x, r13.z, r13.z
  add [precise(x)] r12.x, -r12.x, l(1.000000)
  sqrt [precise(x)] r12.x, r12.x
  mul [precise(xy)] r16.xy, r13.xyxx, r13.xyxx
  mul [precise(xy)] r16.xy, r11.wwww, r16.xyxx
  add [precise(xy)] r15.xy, -r16.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
  swapc [precise(x)] r12.x, r16.x, r12.z, r13.z, r12.x
  mov [precise(w)] r15.w, r14.x
  mul [precise(xyz)] r16.xyz, r15.xzwx, r16.xxxx
  mov [precise(zw)] r14.zw, r15.zzzy
  mul [precise(xyz)] r14.xyz, r12.xxxx, r14.zwyz
  add [precise(xyz)] r14.xyz, r14.xyzx, r16.xyzx
  mul [precise(xyz)] r15.xyz, r13.ywxy, r14.zxyz
  mul [precise(xyz)] r16.xyz, r13.wxyw, r14.yzxy
  add [precise(xyz)] r15.xyz, r15.xyzx, -r16.xyzx
  mov [precise(y)] r11.y, r12.y
  and [precise(xyz)] r11.xyz, r11.xyzx, l(0x0000ffff, 0x0000ffff, 0x0000ffff, 0)
  utof [precise(xyz)] r11.xyz, r11.xyzx
  add [precise(xyz)] r11.xyz, r11.xyzx, l(-32768.000000, -32768.000000, -32768.000000, 0.000000)
  ishl [precise(w)] r11.w, r12.w, l(23)
  iadd [precise(w)] r11.w, r11.w, l(0xf8800000)
  mul [precise(xyz)] r11.xyz, r11.wwww, r11.xyzx
  mul [precise(xyz)] r12.xyz, r11.xxxx, r14.xyzx
  mul [precise(xyz)] r14.xyz, r11.yyyy, r15.xyzx
  mul [precise(xyz)] r13.xyz, r11.zzzz, r13.xywx
  div r11.xyz, l(1.000000, 1.000000, 1.000000, 1.000000), |r11.xyzx|
  bfi [precise(w)] r11.w, l(20), l(2), r10.y, l(0)
  imad [precise(w)] r11.w, r11.w, l(160), l(16)
  ld_raw_indexable [precise(xyz)](raw_buffer)(mixed,mixed,mixed,mixed) r15.xyz, r11.w, t0.xyzx
  ubfe r10.y, l(1), l(20), r10.y
  movc r10.y, r10.y, l(-1.000000), l(1.000000)
else 
  mov [precise(xyz)] r12.xyz, l(0,0,0,0)
  mov [precise(xyz)] r14.xyz, l(0,0,0,0)
  mov [precise(xyz)] r13.xyz, l(0,0,0,0)
  mov [precise(xyz)] r15.xyz, l(0,0,0,0)
  mov r11.xyz, l(0,0,0,0)
  mov [precise(xzw)] r10.xyzw, l(0,0,0,0)
endif 
iadd r11.w, v2.x, cb3[0].w
ishl r12.w, r11.w, l(1)
bfi r13.w, l(31), l(1), r11.w, l(1)
ld_indexable(buffer)(float,float,float,float) r16.xyzw, r13.wwww, t6.xyzw
ld_indexable(buffer)(float,float,float,float) r17.xyz, r12.wwww, t6.xyzw
mul r18.xyz, r16.yzxy, r17.xyzx
mad r17.xyz, r16.xyzx, r17.yzxy, -r18.xyzx
mul r17.xyz, r16.wwww, r17.xyzx
mul r18.xyz, r16.yzxy, r17.xyzx
mad r17.xyz, r17.zxyz, r16.zxyz, -r18.xyzx
mul r17.xyz, r16.wwww, r17.xyzx
mul r18.xyz, r11.xxxx, r12.xyzx
mul r19.xyz, r11.yyyy, r14.xyzx
mul r11.xyz, r11.zzzz, r13.xyzx
mul r20.xyz, r17.yyyy, r19.xyzx
mad r17.xyw, r17.xxxx, r18.xyxz, r20.xyxz
mad o0.xyz, r17.zzzz, r11.xyzx, r17.xywx
mul r17.xyz, r16.yyyy, r19.xyzx
mad r17.xyz, r16.xxxx, r18.xyzx, r17.xyzx
mad o1.xyz, r16.zzzz, r11.xyzx, r17.xyzx
add [precise(yzw)] r6.yzw, r6.yyzw, r15.xxyz
mul [precise(yzw)] r6.yzw, r6.yyzw, l(0.000000, 2097152.000000, 2097152.000000, 2097152.000000)
mul [precise(xyz)] r11.xyz, r12.xyzx, v0.xxxx
mul [precise(xyz)] r12.xyz, r14.xyzx, v0.yyyy
add [precise(xyz)] r11.xyz, r11.xyzx, r12.xyzx
mul [precise(xyz)] r12.xyz, r13.xyzx, v0.zzzz
add [precise(xyz)] r11.xyz, r11.xyzx, r12.xyzx
add [precise(xzw)] r10.xzw, r10.xxzw, r11.xxyz
add [precise(xyz)] r7.xyz, r7.xyzx, r10.xzwx
add [precise(xyz)] r12.xyz, r6.yzwy, r7.xyzx
imul null, r6.y, r11.w, cb3[0].y
ld_indexable(buffer)(float,float,float,float) r6.yz, r6.yyyy, t5.zxyw
mov [precise(w)] r12.w, l(1.000000)
dp4 [precise(x)] r2.x, r12.xyzw, r2.xyzw
dp4 [precise(y)] r2.y, r12.xyzw, r3.xyzw
dp4 [precise(z)] r2.z, r12.xyzw, r4.xyzw
dp4 [precise(w)] r2.w, r12.xyzw, r5.xyzw
if_nz r0.x
  mul [precise(x)] r0.x, r9.w, l(0.500000)
  mul [precise(x)] r3.x, r0.x, r2.x
  mul [precise(y)] r3.y, r2.w, icb[r1.x + 0].x
  add [precise(x)] r0.x, -r0.x, l(1.000000)
  mul [precise(x)] r0.x, r0.x, r3.y
  add [precise(x)] r0.x, r0.x, r3.x
  mov [precise(x)] r3.x, icb[r1.x + 0].x
  mov r3.y, l(1.000000)
  dp2 o6.x, r2.xwxx, r3.xyxx
  mov [precise(x)] r2.x, r0.x
else 
  mov o6.x, l(0)
endif 
add [precise(xyz)] r3.xyz, -r0.yzwy, r12.xyzx
mul [precise(x)] r0.x, l(2097152.000000), cb1[60].z
add [precise(x)] r0.x, r0.x, cb1[69].z
min [precise(x)] r4.x, r0.x, cb0[109].z
add [precise(x)] r0.x, r0.x, -r4.x
add [precise(w)] r3.w, r0.x, r3.z
dp3 [precise(x)] r0.x, r3.xywx, r3.xywx
rsq [precise(y)] r4.y, r0.x
mul [precise(x)] r0.x, r0.x, r4.y
dp3 [precise(z)] r4.z, r3.xyzx, r3.xyzx
sqrt [precise(z)] r4.z, r4.z
dp3 [precise(z)] r3.z, r3.xyzx, cb1[62].xyzx
div [precise(z)] r3.z, r4.z, r3.z
mul [precise(z)] r3.z, r3.z, cb1[225].z
max [precise(z)] r3.z, r3.z, l(0.000000)
max [precise(z)] r3.z, r3.z, cb0[109].w
lt [precise(z)] r4.z, l(0.000000), r3.z
mul [precise(z)] r3.z, r4.y, r3.z
mul [precise(w)] r4.w, r3.w, r3.z
add [precise(x)] r4.x, r4.w, r4.x
add [precise(z)] r3.z, -r3.z, l(1.000000)
mul [precise(z)] r3.z, r0.x, r3.z
add [precise(x)] r5.x, r4.x, -cb0[110].w
mul [precise(x)] r5.x, r5.x, cb0[110].y
max [precise(x)] r5.x, r5.x, l(-127.000000)
exp [precise(x)] r5.x, -r5.x
mul [precise(x)] r5.x, r5.x, cb0[110].z
add [precise(x)] r4.x, r4.x, -cb0[112].y
mul [precise(x)] r4.x, r4.x, cb0[109].y
max [precise(x)] r4.x, r4.x, l(-127.000000)
exp [precise(x)] r4.x, -r4.x
mul [precise(x)] r4.x, r4.x, cb0[112].x
add [precise(w)] r4.w, r3.w, -r4.w
movc [precise(z)] r3.z, r4.z, r3.z, r0.x
movc [precise(x)] r5.x, r4.z, r5.x, cb0[110].x
movc [precise(x)] r4.x, r4.z, r4.x, cb0[109].x
movc [precise(z)] r4.z, r4.z, r4.w, r3.w
mul [precise(w)] r4.w, r4.z, cb0[109].y
mul [precise(z)] r4.z, r4.z, cb0[110].y
max [precise(zw)] r4.zw, r4.zzzw, l(0.000000, 0.000000, -127.000000, -127.000000)
lt [precise(y)] r5.y, l(0.010000), |r4.w|
exp [precise(z)] r5.z, -r4.w
add [precise(z)] r5.z, -r5.z, l(1.000000)
div [precise(z)] r5.z, r5.z, r4.w
mul [precise(w)] r4.w, r4.w, l(0.240227)
add [precise(w)] r4.w, -r4.w, l(0.693147)
movc [precise(w)] r4.w, r5.y, r5.z, r4.w
mul [precise(x)] r4.x, r4.w, r4.x
lt [precise(w)] r4.w, l(0.010000), |r4.z|
exp [precise(y)] r5.y, -r4.z
add [precise(y)] r5.y, -r5.y, l(1.000000)
div [precise(y)] r5.y, r5.y, r4.z
mul [precise(z)] r4.z, r4.z, l(0.240227)
add [precise(z)] r4.z, -r4.z, l(0.693147)
movc [precise(z)] r4.z, r4.w, r5.y, r4.z
mul [precise(z)] r4.z, r4.z, r5.x
add [precise(x)] r4.x, r4.z, r4.x
lt [precise(w)] r4.zw, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[112].zzzw
if_nz r4.z
  mul r5.xy, l(1.000000, -1.000000, 0.000000, 0.000000), cb0[115].yxyy
  dp2 r5.x, r3.xyxx, r5.xyxx
  dp2 r5.y, r3.xyxx, cb0[115].xyxx
  mov r5.z, r3.w
  sample_l_indexable(texturecube)(float,float,float,float) r7.xyz, r5.xyzx, t3.xyzw, s0, cb0[116].z
  sample_l_indexable(texturecube)(float,float,float,float) r5.xyz, r5.xyzx, t3.xyzw, s0, l(0.000000)
  mad_sat r4.z, r0.x, cb0[116].x, cb0[116].y
  add r5.xyz, -r7.xyzx, r5.xyzx
  mad r5.xyz, r4.zzzz, r5.xyzx, r7.xyzx
  mul r5.xyz, r5.xyzx, cb0[111].xyzx
else 
  mov r5.xyz, cb0[111].xyzx
endif 
ge [precise(z)] r4.z, cb0[113].w, l(0.000000)
eq [precise(w)] r5.w, l(0.000000), cb0[112].z
and [precise(z)] r4.z, r4.z, r5.w
if_nz r4.z
  mul [precise(xyw)] r3.xyw, r3.xyxw, r4.yyyy
  dp3_sat [precise(x)] r3.x, r3.xywx, cb0[113].xyzx
  log [precise(x)] r3.x, r3.x
  mul [precise(x)] r3.x, r3.x, cb0[114].w
  exp [precise(x)] r3.x, r3.x
  mul [precise(xyw)] r3.xyw, r3.xxxx, cb0[114].xyxz
  add [precise(y)] r4.y, r3.z, -cb0[113].w
  max [precise(y)] r4.y, r4.y, l(0.000000)
  mul [precise(y)] r4.y, r4.y, r4.x
  exp [precise(y)] r4.y, -r4.y
  min [precise(y)] r4.y, r4.y, l(1.000000)
  add [precise(y)] r4.y, -r4.y, l(1.000000)
  mul [precise(xyw)] r3.xyw, r3.xyxw, r4.yyyy
else 
  mov [precise(xyw)] r3.xyw, l(0,0,0,0)
endif 
lt [precise(x)] r0.x, cb0[112].w, r0.x
and [precise(x)] r0.x, r0.x, r4.w
mul [precise(z)] r3.z, r3.z, r4.x
exp [precise(z)] r3.z, -r3.z
min [precise(z)] r3.z, r3.z, l(1.000000)
max [precise(z)] r3.z, r3.z, cb0[111].w
movc [precise(w)] r4.w, r0.x, l(1.000000), r3.z
add r3.z, -r4.w, l(1.000000)
movc [precise(xyw)] r3.xyw, r0.xxxx, l(0,0,0,0), r3.xyxw
mad r4.xyz, r5.xyzx, r3.zzzz, r3.xywx
lt [precise(x)] r0.x, l(0.000000), r9.y
if_nz r0.x
  mul r0.xyz, r0.yzwy, l(0.000010, 0.000010, 0.000010, 0.000000)
  mad r0.xyz, r12.xyzx, l(0.000010, 0.000010, 0.000010, 0.000000), -r0.xyzx
  dp3 r0.w, r0.xyzx, r0.xyzx
  sqrt r3.x, r0.w
  add r3.x, -r9.x, r3.x
  max r3.x, r3.x, l(0.000000)
  mul r3.x, r6.x, r3.x
  mul r1.w, r1.w, r3.x
  sqrt r3.z, r1.w
  mul r1.z, r1.z, r3.z
  lt r1.w, r1.z, l(0.707107)
  mul r1.z, r1.z, r1.z
  mul r1.z, r1.z, l(2.000000)
  min r1.z, r1.z, l(1.000000)
  movc r1.z, r1.w, r1.z, l(1.000000)
  ne r1.w, r9.z, l(0.000000)
  rsq r0.w, r0.w
  mul r0.xyz, r0.wwww, r0.xyzx
  mad r0.w, -r0.z, r0.z, l(1.000000)
  sqrt r0.w, r0.w
  mad r5.y, r0.z, l(0.500000), l(0.500000)
  div r0.xy, r0.xyxx, r0.wwww
  add r0.z, -|r0.x|, l(1.000000)
  sqrt r0.z, r0.z
  mad r0.w, |r0.x|, l(-0.018729), l(0.074261)
  mad r0.w, r0.w, |r0.x|, l(-0.212114)
  mad r0.w, r0.w, |r0.x|, l(1.570729)
  mul r3.w, r0.z, r0.w
  mad r3.w, r3.w, l(-2.000000), l(3.141593)
  lt r0.x, r0.x, -r0.x
  and r0.x, r0.x, r3.w
  mad r0.x, r0.w, r0.z, r0.x
  lt r0.y, r0.y, l(0.000000)
  add r0.z, -r0.x, l(6.283185)
  movc r0.x, r0.y, r0.z, r0.x
  mul r5.x, r0.x, l(0.159155)
  mad r0.xy, r8.zwzz, l(0.500000, 0.500000, 0.000000, 0.000000), r5.xyxx
  add r0.zw, r8.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
  div r0.zw, r8.xxxy, r0.zzzw
  mul r0.xy, r0.zwzz, r0.xyxx
  div r0.zw, r2.xxxy, r2.wwww
  mad r0.zw, r0.zzzw, l(0.000000, 0.000000, 0.500000, -0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
  movc r3.xy, r1.wwww, r0.xyxx, r0.zwzz
  sample_l_indexable(texture3d)(float,float,float,float) r0.xyzw, r3.xyzx, t4.xyzw, s1, l(0.000000)
  mul r0.xyz, r1.zzzz, r0.xyzx
  mul r0.xyz, r7.wwww, r0.xyzx
  mad o4.xyz, r0.xyzx, r4.wwww, r4.xyzx
  add r0.x, -r0.w, l(1.000000)
  mad r0.x, -r1.z, r0.x, l(1.000000)
  mul o4.w, r0.x, r4.w
else 
  mov [precise(w)] o4.xyzw, r4.xyzw
endif 
mul o1.w, r10.y, r16.w
mov o0.w, l(0)
mov o2.xy, r6.yzyy
mov o2.zw, l(0,0,0,0)
mov [precise] o5.xyzw, r2.xyzw
mov [precise(xy)] o3.xy, r1.xyxx
ret 
// Approximately 354 instruction slots used
